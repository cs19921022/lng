<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <context:component-scan base-package="cn.edu.hdu.lab505.innovation.*"/>

    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置数据源 -->
    <!--<bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="validationQuery" value="SELECT 1" />
        <property name="testOnBorrow" value="true" />
    </bean>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="filters" value="stat"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle" value="true"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
        <property name="testOnBorrow" value="false"/>
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="false"/>
        <!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxOpenPreparedStatements" value="20"/>
    </bean>

    <!-- 配置hibernate SessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hiberante.format_sql">true</prop>
            </props>
        </property>

        <!-- mappingDirectoryLocations 指定映射文件目录 -->
        <property name="mappingDirectoryLocations">
            <list>
                <value>classpath:cn/edu/hdu/lab505/innovation/domain</value>
            </list>
        </property>
        <!--<property name="packagesToScan">
            <list>
                <value>cn.edu.hdu.lab505.innovation.domain</value>
            </list>
        </property>-->

    </bean>
    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 定义CacheManager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <!-- 指定配置文件的位置 -->
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <!-- 指定新建的CacheManager的名称 -->
        <property name="cacheManagerName" value="cacheManagerName"/>
    </bean>

    <!-- 定义一个Ehcache -->
    <bean id="tokenCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheName" value="token"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
    <!-- 定义一个Ehcache -->
    <bean id="accountCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheName" value="account"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!-- shiro filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/restapi/account/login"/>
        <property name="filters">
            <util:map>
                <entry key="statelessAuthc" value-ref="statelessAuthcFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /restapi/account/**/update = statelessAuthc
                /restapi/account/** = anon
                /admin/** = statelessAuthc,roles[admin]
                /** = statelessAuthc
            </value>
        </property>
    </bean>
    <bean id="statelessRealm" class="org.apache.shiro.realm.StatelessRealm">
        <property name="tokenCache" ref="tokenCache"></property>
    </bean>
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="statelessRealm"></property>
        <property name="subjectDAO.sessionStorageEvaluator.sessionStorageEnabled" value="false"/>
        <property name="subjectFactory" ref="subjectFactory"/>
    </bean>
    <!-- Subject工厂-->
    <bean id="subjectFactory" class="org.apache.shiro.StatelessDefaultSubjectFactory"/>
    <bean id="statelessAuthcFilter" class="org.apache.shiro.web.filter.authc.StatelessFilter">
    </bean>

    <!--<bean name="targetQuartz" class=""/>

    <bean id="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="targetQuartz"/>
        <property name="targetMethod" value="printMessage"/>
    </bean>-->

    <!-- 定义触发器来管理任务Bean -->
    <bean id="cronTriggerMoveData"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <!-- 使用嵌套Bean的方式来定义任务Bean -->
            <bean class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
                <!-- 指定任务Bean的实现类 -->
                <property name="jobClass" value="cn.edu.hdu.lab505.innovation.quartz.job.MoveDataJob"/>
            </bean>
        </property>
        <!-- 指定Cron表达式：每月1日2时启动 -->
        <!--s,m,h,dateOfMonth,month,dayOfWeek,year-->
        <property name="cronExpression" value="0 0 2 1 * ? *"/>
    </bean>


    <!-- 执行实际的调度调度 -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTriggerMoveData"/>
            </list>
        </property>
    </bean>

    <bean id="springUtil" class="cn.edu.hdu.lab505.innovation.util.SpringUtil"/>

</beans>
